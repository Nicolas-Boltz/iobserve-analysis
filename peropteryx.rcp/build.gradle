def runtimeDeps = [
'org.eclipse.osgi',
'org.eclipse.update.configurator',
'org.eclipse.equinox.ds',
'org.eclipse.equinox.registry',
'org.eclipse.core.commands',
'javax.annotation',
'javax.inject',
'org.eclipse.core.jobs',
'org.eclipse.equinox.preferences',
'org.eclipse.core.contenttype',
'org.eclipse.equinox.util',
'org.eclipse.osgi.services'
]

dependencies {
	compile project(":analysis")
	
	compile "eclipse-deps:org.eclipse.osgi:+"
	compile "eclipse-deps:org.eclipse.core.jobs:+"
	compile "eclipse-deps:org.eclipse.core.runtime:+"
	compile "eclipse-deps:org.eclipse.core.resources:+"
	compile "eclipse-deps:org.eclipse.debug.core:+"
	compile "eclipse-deps:org.eclipse.equinox.app:+"	
	
	compile 'extra:de.uka.ipd.sdq.dsexplore:1.3.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.analysis.cost:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.analysis.lqn:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.analysis.reliability:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.analysis.simucom:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.bayesnets:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.dsexplore.qml:1.0.0.201709290946'
	compile 'extra:de.uka.ipd.sdq.simucomframework:4.1.0.201709290901'
	compile 'extra:de.uka.ipd.sdq.simulation:4.1.0.201709290901'
	compile 'extra:de.uka.ipd.sdq.workflow.ui:2.2.3.201709282207'
	compile 'extra:org.palladiosimulator.edp2:2.0.0.201608091414'
	compile 'extra:org.palladiosimulator.edp2.dao:1.0.0.201608091414'
	compile 'extra:org.palladiosimulator.recorderframework:2.0.1.201603031355'
	compile 'extra:org.palladiosimulator.recorderframework.edp2:2.0.2.201603031355'
	compile 'extra:org.palladiosimulator.reliability:3.1.0.201511051309'

	testCompile "junit:junit:${VER_JUNIT}"

	runtime 'com.diffplug.osgi:com.diffplug.osgi.extension.sun.misc:0.0.0'
	
	//runtimeDeps.each {
	//	runtime "eclipse-deps:${it}:+"
	//}
}
jar.manifest.attributes('Bundle-SymbolicName': project.name + ';singleton:=true')


//////////////////////
// Run headless app //
//////////////////////
def codegenSetup = tasks.getByPath(':codegenSetup')
def thisLaunch = codegenSetup.launchTask(project, 'thisLaunch')
thisLaunch.args = ['-consoleLog', '-application', applicationName, 'file', 'test']


