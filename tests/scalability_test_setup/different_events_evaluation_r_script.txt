options("scipen"=10)    # set high penalty for scientific display

TPreprocess <- matrix(nrow = 10, ncol = 6)
TRuntimeUpdate <- matrix(nrow = 10, ncol = 6)

experimentSizes <- c(1,10,100,1000,10000,100000)

for(k in 0:9) {
	for(i in 1:length(experimentSizes)) {
		path <- 'D:\\Dokumente\\Uni\\HiWi\\Ergebnisse Skalierbarkeit\\X_different_events_one_user\\'
		experimentNr <- k
		experimentNrFolder <- paste(paste(path, experimentNr, sep=""), "\\", sep="")
		
		experimentSize <- experimentSizes[i]
		experimentDescription <- paste(experimentSize, '_different_events_one_user', sep="")
		
		experimentFolder <- paste(paste(experimentNrFolder, experimentDescription, sep=""), '\\', sep="")
		
		# calculating values for TRuntimeUpdate
		entryEventSequenceLoggingPath <- paste(experimentFolder, "TEntryEventSequenceLogging.csv", sep="")
		
		entryEventSequence <- read.csv(file = entryEventSequenceLoggingPath, header = F, sep = ";")
		behTransf <- as.numeric(as.character(entryEventSequence$V4[3]))
		modelUpdate <- as.numeric(as.character(entryEventSequence$V5[3]))
		experimentNr <- k + 1 
		TRuntimeUpdate[experimentNr,i] <- behTransf + modelUpdate
		
		# calculating values for TPreprocess
		entryCallLoggingPath <- paste(experimentFolder, "TEntryCallLogging.csv", sep="")
		entryCallSequenceLoggingPath <- paste(experimentFolder, "TEntryCallSequenceLogging.csv", sep="")

		entryCall <- read.csv(file = entryCallLoggingPath, header = F, sep = ";")
		entryCallSequence <- read.csv(file = entryCallSequenceLoggingPath, header = F, sep = ";")
		
		endIndex <- experimentSize + 2
		
		entryCallSum <- sum(as.numeric(as.character(entryCall$V4[c(3:endIndex)])))
		entryCallSequenceSum <- sum(as.numeric(as.character(entryCallSequence$V6[c(3:endIndex)])))
		
		TPreprocess[experimentNr,i] <- entryCallSum + entryCallSequenceSum
	}
}

TPreprocessMeans <- rep(0,length(experimentSizes))
TPreprocessMeansMs <- rep(0,length(experimentSizes))
TRuntimeUpdateMeans <- rep(0,length(experimentSizes))

for(k in 1:length(experimentSizes)) {
	TPreprocessMeans[k] <- mean(TPreprocess[,k], trim = 0.1)
	TPreprocessMeansMs[k] <- TPreprocessMeans[k]/1000000
	TRuntimeUpdateMeans[k] <- mean(TRuntimeUpdate[,k], trim = 0.1)
}

options("scipen"=0)
labelsX=parse(text=paste(seq(10, 10, length.out = 6), "^", seq(0,5), sep=""))

#Plots and saves pdf for TPreprocess
pdf("D:\\Dokumente\\Uni\\HiWi\\Ergebnisse Skalierbarkeit\\TPreprocess_different_events_ns.pdf") 

plot(experimentSizes,TPreprocessMeans, log="xy", axes=FALSE, type = "o", main = "TPreprocess", ylim = c(1000000, 1000000000), xlab="Number of Services Called", ylab="Mean Time [ns]")

experimentYAxis <- 10^(6:9)
abline(h=experimentYAxis, col="gray", lty=3)
labelsY=parse(text=paste(seq(10, 10, length.out = 4), "^", seq(6,9), sep=""))

axis(1, at = experimentSizes, las = 1, labels = labelsX)
axis(2, at = experimentYAxis, las = 1, labels = labelsY)
box()

dev.off()

#Plots and saves pdf for TPreprocess in ms
pdf("D:\\Dokumente\\Uni\\HiWi\\Ergebnisse Skalierbarkeit\\TPreprocess_different_events_ms.pdf") 

plot(experimentSizes,TPreprocessMeansMs, log="xy", axes=FALSE, type = "o", main = "TPreprocess", ylim = c(1, 100000), xlab="Number of Services Called", ylab="Mean Time [ms]")

experimentYAxis <- 10^(0:5)
abline(h=experimentYAxis, col="gray", lty=3)
labelsY=parse(text=paste(seq(10, 10, length.out = 6), "^", seq(0,5), sep=""))

axis(1, at = experimentSizes, las = 1, labels = labelsX)
axis(2, at = experimentYAxis, las = 1, labels = labelsY)
box()

dev.off()

#Plots and saves pdf for TRuntimeUpdate
pdf("D:\\Dokumente\\Uni\\HiWi\\Ergebnisse Skalierbarkeit\\TRuntimeUpdate_different_events.pdf") 

plot(experimentSizes,TRuntimeUpdateMeans, log="xy", axes=FALSE, type = "o", main = "TRuntimeUpdate", ylim = c(10,1000000), xlab="Number of User Sessions", ylab="Mean Time [ms]")

experimentYAxis <- 10^(1:6)
abline(h=experimentYAxis, col="gray", lty=3)
labelsY=parse(text=paste(seq(10, 10, length.out = 6), "^", seq(1,6), sep=""))

axis(1, at = experimentSizes, las = 1, labels = labelsX)
axis(2, at = experimentYAxis, las = 1, labels = labelsY)
box()

dev.off()
