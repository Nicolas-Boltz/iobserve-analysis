project.ext {
    aspectjVersion = '1.8.4'
}

ext {
    working_dir = 'res/working_dir/'
	original_dir = 'res/original_dir/'
}

apply plugin: 'application'
apply plugin: AspectJPlugin

version = '1.0'
sourceCompatibility = 1.8

// checking the palladio installation
if (project.properties['palladio.installation'] == null || project.properties['palladio.installation'].isEmpty()) {
	System.err.println("!!! PALLADIO installation missing !!!")
	System.err.println("Add the file iobserve-analysis/gradle.properties. Add the property palladio.installation=PATH TO THE PLUGIN FOLDER OF YOU PALLADIO INSTALLATION")
	System.err.println("Use / for path separation")
} else {
	println "Your PALLADIO installation is at: " + project.properties['palladio.installation']
}

sourceSets {
    irl {
    	java {
    		srcDir 'src/main/irl'
    		srcDir 'src/gen/java'
    		srcDir 'src/gen/java-factory'
    	}
    }
    main {
    	java {
    		srcDir 'src/gen/java'
    	}
    }
}

dependencies {
	compile 'aspectj:aspectjrt:1.5.4'
	
	compile gradleApi()
	
    compile project(":org.iobserve.monitoring")
    compile project(":org.iobserve.common")
	compile 'org.codehaus.mojo:exec-maven-plugin:1.2'
	compile 'net.sourceforge.teetime:teetime:1.1.2'
	compile 'net.sourceforge.teetime-stages:teetime-stages:1.1.2'
	compile 'net.kieker-monitoring:kieker:1.13-SNAPSHOT'
	compile 'org.eclipse.core:runtime:3.10.+'
	compile 'org.antlr:antlr-runtime:3.5.2'
	compile 'lpg.runtime:java:2.0.+'
    
    compile fileTree(dir: "${project.properties['palladio.installation']}", include: {file -> (
    		file.name.startsWith("de.uka.ipd.sdq") 
    		|| file.name.startsWith("org.palladiosimulator") 
    		|| file.name.contains("emf") 
    		|| file.name.contains("ocl"))})
    compile fileTree(dir: 'libs', include: '*.jar')
    
    
    //compile group: 'org.eclipselabs', name: 'cdo.p2', version: '4.4.0'
	//compile group: 'org.eclipselabs', name: 'cdo', version: '4.4.0', ext: 'pom'
	//compile group: 'org.eclipselabs', name: 'cdo-maven', version: '4.4.0', ext: 'pom'
	//compile 'org.eclipse:ocl:3.4.+'
	//compile 'org.eclipse.ocl:common:1.2.+'
	//compile 'org.eclipse.ocl:ecore:3.3.+'
	
	//compile 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.11.+'
	//compile 'org.eclipse.emf:org.eclipse.emf.common:2.11.+'
	//compile 'org.eclipse.emf:org.eclipse.emf.ecore:2.11.+'
	//compile 'org.eclipse.uml2:org.eclipse.uml2.uml:3.1.+'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.version = version
        pom.groupId = 'iobserve-analysis'
        pom.artifactId = 'analysis'
    }
}

//********************************************************************************************
//
//********************************************************************************************

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Main-Class' : 'org.iobserve.analysis.AnalysisMain'
    }
    baseName = project.name + '-snapshot'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task cleanPcmWorkingDir(type: Delete) {
	delete working_dir
}

task copyPcmToWorkingDir(type: Copy) {
	dependsOn << cleanPcmWorkingDir
	from original_dir
	into working_dir
}

task cleanDebug {
	dependsOn << copyPcmToWorkingDir
}

task runAnalysis(type: JavaExec) {
	dependsOn << build
	dependsOn << copyPcmToWorkingDir
	String appArgs = "--dirMonitoring=res/working_dir/kieker --dirPcm=res/working_dir/pcm --dirLogging=output/logging"
	args = [appArgs]
	classpath = files("build/libs/org.iobserve.analysis-1.0.jar")
	main = 'org.iobserve.analysis.AnalysisMain'
}

// ApectJ Plugin

class AspectJPlugin implements Plugin<Project> {

    void apply(Project project) {
        if (!project.hasProperty('aspectjVersion')) {
            throw new GradleException("You must set the property 'aspectjVersion' before applying the aspectj plugin")
        }

        if (project.configurations.findByName('ajtools') == null) {
            project.configurations.create('ajtools')
            project.dependencies {
                ajtools "org.aspectj:aspectjtools:${project.aspectjVersion}"
                compile "org.aspectj:aspectjrt:${project.aspectjVersion}"
            }
        }

        if (project.configurations.findByName('aspectpath') == null) {
            project.configurations.create('aspectpath')
        }
		
        project.tasks.create(name: 'compileAspect', overwrite: true, description: 'Compiles AspectJ Source', type: Ajc) {
            dependsOn project.configurations*.getTaskDependencyFromProjectDependency(true, "compileJava")

            dependsOn project.processResources
            sourceSet = project.sourceSets.main
            inputs.files(sourceSet.allSource)
            outputs.dir(sourceSet.output.classesDir)
            aspectPath = project.configurations.aspectpath
        }
        project.tasks.compileJava.deleteAllActions()
        project.tasks.compileJava.dependsOn project.tasks.compileAspect
		
        project.tasks.create(name: 'compileTestAspect', overwrite: true, description: 'Compiles AspectJ Test Source', type: Ajc) {
            dependsOn project.processTestResources, project.compileJava, project.jar
            sourceSet = project.sourceSets.test
            inputs.files(sourceSet.allSource)
            outputs.dir(sourceSet.output.classesDir)
            aspectPath = project.files(project.configurations.aspectpath, project.jar.archivePath)
        }
        project.tasks.compileTestJava.deleteAllActions()
        project.tasks.compileTestJava.dependsOn project.tasks.compileTestAspect
    }
    
}

class Ajc extends DefaultTask {
    SourceSet sourceSet
    FileCollection aspectPath

    Ajc() {
        logging.captureStandardOutput(LogLevel.INFO)
    }

    @TaskAction
    def compile() {
        logger.info("=" * 30)
        logger.info("=" * 30)
        logger.info("Running ajc ...")
        logger.info("classpath: ${sourceSet.compileClasspath.asPath}")
        logger.info("srcDirs $sourceSet.java.srcDirs")
        ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: project.configurations.ajtools.asPath)
        ant.iajc(classpath: sourceSet.compileClasspath.asPath, fork: 'true', destDir: sourceSet.output.classesDir.absolutePath,
                source: project.convention.plugins.java.sourceCompatibility,
                target: project.convention.plugins.java.targetCompatibility,
                encoding: 'UTF-8',
                aspectPath: aspectPath.asPath, sourceRootCopyFilter: '**/*.java', showWeaveInfo: 'true') {
            sourceroots {
                sourceSet.java.srcDirs.each {
                    logger.info("   sourceRoot $it")
                    pathelement(location: it.absolutePath)
                }
            }
        }
    }
}
