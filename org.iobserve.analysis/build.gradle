version = '1.0'

ext {
	pcm_working_dir = 'res/working_dir/pcm'
	pcm_original_dir = 'res/original_dir/pcm'
}

// checking the palladio installation
if (project.properties['palladio.installation'] == null || project.properties['palladio.installation'].isEmpty()) {
	System.err.println("!!! PALLADIO installation missing !!!")
	System.err.println("Add the file iobserve-analysis/gradle.properties. Add the property palladio.installation=PATH TO THE PLUGIN FOLDER OF YOU PALLADIO INSTALLATION")
	System.err.println("Use / for path separation")
} else {
	println "Your PALLADIO installation is at: " + project.properties['palladio.installation']
}

sourceSets {
    irl {
    	java {
    		srcDir 'src/main/irl'
    		srcDir 'src/gen/java'
    		srcDir 'src/gen/java-factory'
    	}
    }
    main {
    	java {
    		srcDir 'src/gen/java'
    	}
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'org.iobserve.analysis',
                   'Implementation-Version': version
       	attributes 'Main-Class': 'org.iobserve.analysis.AnalysisMain'
    }
}



repositories {
   maven {url "/home/reiner/Projects/iObserve/iobserve-repository/mvn-repo/"}
   maven {url "https://mvnrepository.com/artifact/nz.ac.waikato.cms.weka/weka-stable"}
   
   flatDir {
       dirs 'libs'
   }
}

dependencies {
	
    compile project(":org.iobserve.monitoring")
    compile project(":org.iobserve.common")
	compile 'org.codehaus.mojo:exec-maven-plugin:1.2'
	compile 'net.sourceforge.teetime:teetime:2.1'
	compile 'net.sourceforge.teetime-stages:teetime-stages:2.1'
	compile 'net.kieker-monitoring:kieker:1.13-SNAPSHOT'
    
	compile 'org.eclipse.emf:org.eclipse.emf.ecore:2.11.1-v20150805-0538'
	compile 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.11.+'
	compile 'org.eclipse.emf:org.eclipse.emf.common:2.11.+'
		
	compile 'extra:de.uka.ipd.sdq.identifier:2.1.0.201511050934'
	compile 'extra:org.palladiosimulator.pcm:4.0.0.201511051135'

	compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.13'

	compile 'extra:de.uka.ipd.sdq.stoex:2.2.0+'
	compile 'extra:de.uka.ipd.sdq.units:2.1.0.201511050934'
	compile 'extra:de.uka.ipd.sdq.probfunction:2.1.0.201511050934'
	compile 'extra:org.eclipse.emf.cdo:4.5.0.v20160607-1254'
	compile 'extra:org.eclipse.emf.cdo.common:4.5.0.v20160301-1326'
	compile 'extra:org.eclipse.net4j:4.5.0.v20160607-1254'
	compile 'extra:org.eclipse.net4j.util:3.6.0.v20160607-1254'
	compile 'extra:org.eclipse.equinox.common:3.8.0.v20160509-1230'
	
	compile 'org.apache.logging.log4j:log4j-api:2.6.2'
    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
    
    compile name: 'mapping.lib'  
    compile name: 'giusa.tooling.cmd-1.2'
    compile name: 'giusa.software.csv-1.0'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.version = version
        pom.groupId = 'iobserve-analysis'
        pom.artifactId = 'analysis'
    }
}

//********************************************************************************************
//
//********************************************************************************************

task cleanPcmWorkingDir(type: Delete) {
	delete pcm_working_dir
}

task copyPcmToWorkingDir(type: Copy) {
	dependsOn << cleanPcmWorkingDir
	from pcm_original_dir
	into pcm_working_dir
}

task cleanDebug {
	dependsOn << copyPcmToWorkingDir
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect {it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runAnalysis(type: JavaExec) {
	dependsOn << build
	dependsOn << copyPcmToWorkingDir
	String appArgs = "--dirMonitoring=res/original_dir/kieker --dirPcm=res/working_dir/pcm --dirLogging=output/logging"
	args = [appArgs]
	classpath = files("build/libs/org.iobserve.analysis-1.0.jar")
	main = 'org.iobserve.analysis.AnalysisMain'
}

/*
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'iObserve-Analysis',  
        	'Implementation-Version': version,
        	'Main-Class': 'org.iobserve.analysis.AnalysisMain'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}*/