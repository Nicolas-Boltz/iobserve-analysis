version = '1.0'

ext {
	pcm_working_dir = 'res/working_dir/pcm'
	pcm_original_dir = 'res/original_dir/pcm'
}

// checking the palladio installation
if (project.properties['palladio.installation'] == null || project.properties['palladio.installation'].isEmpty()) {
	System.err.println("!!! PALLADIO installation missing !!!")
	System.err.println("Add the file iobserve-analysis/gradle.properties. Add the property palladio.installation=PATH TO THE PLUGIN FOLDER OF YOU PALLADIO INSTALLATION")
	System.err.println("Use / for path separation")
} else {
	println "Your PALLADIO installation is at: " + project.properties['palladio.installation']
}

sourceSets {
    irl {
    	java {
    		srcDir 'src/main/irl'
    		srcDir 'src/gen/java'
    		srcDir 'src/gen/java-factory'
    	}
    }
    main {
    	java {
    		srcDir 'src/gen/java'
    	}
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'org.iobserve.analysis',
                   'Implementation-Version': version
       	attributes 'Main-Class': 'org.iobserve.analysis.AnalysisMain'
    }
}

dependencies {
	
    compile project(":org.iobserve.monitoring")
    compile project(":org.iobserve.common")
	compile 'org.codehaus.mojo:exec-maven-plugin:1.2'
	compile 'net.sourceforge.teetime:teetime:1.1.2'
	compile 'net.sourceforge.teetime-stages:teetime-stages:1.1.2'
	compile 'net.kieker-monitoring:kieker:1.13-SNAPSHOT'
	compile 'org.eclipse.core:runtime:3.10.+'
	compile 'org.antlr:antlr-runtime:3.5.2'
	compile 'lpg.runtime:java:2.0.+'
    
    compile fileTree(dir: "${project.properties['palladio.installation']}", include: {file -> (
    		file.name.startsWith("de.uka.ipd.sdq") 
    		|| file.name.startsWith("org.palladiosimulator") 
    		|| file.name.contains("emf") 
    		|| file.name.contains("ocl"))})
    compile fileTree(dir: 'libs', include: '*.jar')
    
    //compile group: 'org.eclipselabs', name: 'cdo.p2', version: '4.4.0'
	//compile group: 'org.eclipselabs', name: 'cdo', version: '4.4.0', ext: 'pom'
	//compile group: 'org.eclipselabs', name: 'cdo-maven', version: '4.4.0', ext: 'pom'
	//compile 'org.eclipse:ocl:3.4.+'
	//compile 'org.eclipse.ocl:common:1.2.+'
	//compile 'org.eclipse.ocl:ecore:3.3.+'
	
	//compile 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.11.+'
	//compile 'org.eclipse.emf:org.eclipse.emf.common:2.11.+'
	//compile 'org.eclipse.emf:org.eclipse.emf.ecore:2.11.+'
	//compile 'org.eclipse.uml2:org.eclipse.uml2.uml:3.1.+'
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.version = version
        pom.groupId = 'iobserve-analysis'
        pom.artifactId = 'analysis'
    }
}

//********************************************************************************************
//
//********************************************************************************************

task cleanPcmWorkingDir(type: Delete) {
	delete pcm_working_dir
}

task copyPcmToWorkingDir(type: Copy) {
	dependsOn << cleanPcmWorkingDir
	from pcm_original_dir
	into pcm_working_dir
}

task cleanDebug {
	dependsOn << copyPcmToWorkingDir
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect {it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runAnalysis(type: JavaExec) {
	dependsOn << build
	dependsOn << copyPcmToWorkingDir
	String appArgs = "--dirMonitoring=res/original_dir/kieker --dirPcm=res/working_dir/pcm --dirLogging=output/logging"
	args = [appArgs]
	classpath = files("build/libs/org.iobserve.analysis-1.0.jar")
	main = 'org.iobserve.analysis.AnalysisMain'
}

/*
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'iObserve-Analysis',  
        	'Implementation-Version': version,
        	'Main-Class': 'org.iobserve.analysis.AnalysisMain'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}*/